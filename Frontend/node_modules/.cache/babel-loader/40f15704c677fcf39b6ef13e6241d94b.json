{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport default function useMutationObserver() {\n  var instance = useRef();\n  var destroyObserver = function destroyObserver() {\n    if (instance.current) {\n      instance.current.takeRecords();\n      instance.current.disconnect();\n      instance.current = undefined;\n    }\n  };\n  var createObserver = function createObserver(target, callback) {\n    if (MutationObserver) {\n      destroyObserver();\n      instance.current = new MutationObserver(callback);\n      instance.current.observe(target, {\n        childList: true,\n        subtree: true,\n        attributeFilter: ['style', 'class']\n      });\n    }\n  };\n  useEffect(function () {\n    return destroyObserver;\n  }, []);\n  var reRendering = function reRendering(mutation, watermarkElement) {\n    var flag = false;\n    // Whether to delete the watermark node\n    if (mutation.removedNodes.length) {\n      flag = Array.from(mutation.removedNodes).some(function (node) {\n        return node === watermarkElement;\n      });\n    }\n    // Whether the watermark dom property value has been modified\n    if (mutation.type === 'attributes' && mutation.target === watermarkElement) {\n      flag = true;\n    }\n    return flag;\n  };\n  return {\n    createObserver: createObserver,\n    destroyObserver: destroyObserver,\n    reRendering: reRendering\n  };\n}","map":null,"metadata":{},"sourceType":"module"}