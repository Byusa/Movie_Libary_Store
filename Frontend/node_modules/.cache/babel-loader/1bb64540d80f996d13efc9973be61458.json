{"ast":null,"code":"import _defineProperty from \"/Users/sergebyusa/Desktop/Projects/book_practice_js/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/sergebyusa/Desktop/Projects/book_practice_js/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useMemo, useContext } from 'react';\nimport { QRCodeCanvas } from 'qrcode.react';\nimport classNames from 'classnames';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport { ConfigContext } from '../config-provider';\nimport LocaleReceiver from '../locale/LocaleReceiver';\nimport warning from '../_util/warning';\nimport useStyle from './style/index';\nimport Spin from '../spin';\nimport Button from '../button';\nimport theme from '../theme';\nvar useToken = theme.useToken;\nvar QRCode = function QRCode(props) {\n  var value = props.value,\n    _props$icon = props.icon,\n    icon = _props$icon === void 0 ? '' : _props$icon,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 160 : _props$size,\n    _props$iconSize = props.iconSize,\n    iconSize = _props$iconSize === void 0 ? 40 : _props$iconSize,\n    _props$color = props.color,\n    color = _props$color === void 0 ? '#000' : _props$color,\n    _props$errorLevel = props.errorLevel,\n    errorLevel = _props$errorLevel === void 0 ? 'M' : _props$errorLevel,\n    _props$status = props.status,\n    status = _props$status === void 0 ? 'active' : _props$status,\n    _props$bordered = props.bordered,\n    bordered = _props$bordered === void 0 ? true : _props$bordered,\n    onRefresh = props.onRefresh,\n    style = props.style,\n    className = props.className,\n    customizePrefixCls = props.prefixCls;\n  var _useContext = useContext(ConfigContext),\n    getPrefixCls = _useContext.getPrefixCls;\n  var prefixCls = getPrefixCls('qrcode', customizePrefixCls);\n  var _useStyle = useStyle(prefixCls),\n    _useStyle2 = _slicedToArray(_useStyle, 2),\n    wrapSSR = _useStyle2[0],\n    hashId = _useStyle2[1];\n  var _useToken = useToken(),\n    token = _useToken.token;\n  var qrCodeProps = useMemo(function () {\n    var imageSettings = {\n      src: icon,\n      x: undefined,\n      y: undefined,\n      height: iconSize,\n      width: iconSize,\n      excavate: true\n    };\n    return {\n      value: value,\n      size: size - (token.paddingSM + token.lineWidth) * 2,\n      level: errorLevel,\n      bgColor: 'transparent',\n      fgColor: color,\n      imageSettings: icon ? imageSettings : undefined\n    };\n  }, [errorLevel, color, icon, iconSize, size, value]);\n  if (!value) {\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'QRCode', 'need to receive `value` props') : void 0;\n    }\n    return null;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!(icon && errorLevel === 'L'), 'QRCode', 'ErrorLevel `L` is not recommended to be used with `icon`, for scanning result would be affected by low level.') : void 0;\n  }\n  var cls = classNames(prefixCls, className, hashId, _defineProperty({}, \"\".concat(prefixCls, \"-borderless\"), !bordered));\n  return wrapSSR( /*#__PURE__*/React.createElement(LocaleReceiver, {\n    componentName: \"QRCode\"\n  }, function (locale) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: Object.assign(Object.assign({}, style), {\n        width: size,\n        height: size\n      }),\n      className: cls\n    }, status !== 'active' && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-mask\")\n    }, status === 'loading' && /*#__PURE__*/React.createElement(Spin, null), status === 'expired' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"\".concat(prefixCls, \"-expired\")\n    }, locale.expired), typeof onRefresh === 'function' && /*#__PURE__*/React.createElement(Button, {\n      type: \"link\",\n      icon: /*#__PURE__*/React.createElement(ReloadOutlined, null),\n      onClick: onRefresh\n    }, locale.refresh))), /*#__PURE__*/React.createElement(QRCodeCanvas, Object.assign({}, qrCodeProps)));\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  QRCode.displayName = 'QRCode';\n}\nexport default QRCode;","map":null,"metadata":{},"sourceType":"module"}